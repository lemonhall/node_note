1、下载es最新版本
https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.3.2/elasticsearch-2.3.2.tar.gz

2、下载驱动
https://github.com/Anchormen/sql4es

3、安装head插件
./plugin install mobz/elasticsearch-head

4、建一个新的索引myindex

5、引入jar包

package es;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

public class es {

        public static void main(String[] args) {
                // TODO Auto-generated method stub
                try {
                        Class.forName("nl.anchormen.sql4es.jdbc.ESDriver");
                        try {
                                Connection con = DriverManager.getConnection("jdbc:sql4es://localhost:9300/myindex");
                                Statement st = con.createStatement();
                                // execute a query on mytype within myidx
                                //st.execute("INSERT INTO mytype (myLong, myDouble, myDate, myText) VALUES (1, 1.25, '2016-02-01', 'Hi there!'),(10, 103.234, '2016-03-01', 'How are you?')");
                                ResultSet rs = st.executeQuery("SELECT * FROM mytype");
                                ResultSetMetaData rsmd = rs.getMetaData();
                                int nrCols = rsmd.getColumnCount();
                                // get other column information like type
                                while(rs.next()){
                                    for(int i=1; i<=nrCols; i++){
                                        System.out.println(rs.getObject(i));
                                    }
                                }
                                rs.close();
                                con.close();
                                
                        } catch (SQLException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                } catch (ClassNotFoundException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                }
                
        }

}


6、结果：
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
AVSEkU12K9z_Tv138eJK
myindex
mytype
2016-02-01
1.25
1
Hi there!
AVSEkU12K9z_Tv138eJL
myindex
mytype
2016-03-01
103.234
10
How are you?


7、用GUI

Example using SQLWorkbenchJ

SQLWorkbenchJ is a SQL GUI that can be used to access an Elasticsearch cluster using the sql4es driver. Follow the steps below to set it up and execute the example statements.

download SQLWorkbenchJ for your platform from the website
Install SQLWorkbencJ and open it
Add the SQL4ES driver:
click 'Manage Drivers' in the bottom left corner
click the blank document icon on the left to add a new driver
Give the driver a descriptive name (sql4es for example)
point the Library to the sql4es jar file on your system (found within the release directory of the project)
set 'nl.anchormen.sql4es.jdbc.ESDriver' as the Classname
set 'jdbc:sql4es://localhost:9300/index' as the sample URL
Click 'Ok' to save the configuration
Add a new database connection using the sql4es driver
click the 'create new connection profile' button in the top
give the profile a descriptive name
specify the sql4es driver added before
specify the url of your Elasticsearch 2.X cluster using the index 'myindex' ('jdbc:sql4es://localhost:9300/myindex'
click the save button on the top
Select the created profile and click 'Ok' to create the connection
An empty workbench will open when everything is ok.
Copy the statements below into the workbench
Execute the statements one by one and view the results. A brief description of each statement can be found below the SQL statements
Running all the statements as a sequence works as well but will not provide any results for the SELECT statements because the cluster is still indexing the inserts when they are being executed (remember, elasticsearch is not a relational database!)
INSERT INTO mytype (myLong, myDouble, myDate, myText) VALUES (1, 1.25, '2016-02-01', 'Hi there!'),(10, 103.234, '2016-03-01', 'How are you?');

SELECT * FROM mytype;
SELECT _score, myLong, myText FROM mytype WHERE myText = 'hi' AND myDate > '2016-01-01';

EXPLAIN SELECT _score, myLong, myText FROM mytype WHERE myText = 'hi' AND myDate > '2016-01-01';

CREATE TABLE myindex2.mytype2 AS SELECT myText, myLong*10 as myLong10, myDouble FROM mytype;

DELETE FROM mytype WHERE myDouble = 1.25;
USE myindex2;
SELECT * FROM mytype2;
CREATE VIEW myview AS SELECT * FROM myindex, myindex2 WHERE myDouble > 2;
USE myview;
SELECT * FROM mytype, mytype2;
drop view myview;
drop table myindex;
drop table myindex2;
insert two documents into the new type called mytype (the type will be created and mapping will be done dynamically by elasticsearch). Check the DatabaseExplorer option to view the mapping created.

show all documents present in mytype

execute a search and show the score

show the Elasticsearch query performed for the search

create a new index and a new type based on the documents in mytype. Note that mytype2 has some different fieldnames than the type it was created of.

delete some documents

make the newly created index 'myindex2' the active one

show all documents within mytype2

create a view (alias) for myindex and myindex2 with a filter

make the newly created view the active one

select all documents present within the view, note that:

not all documents are shown due to the filter on the alias

some of the fields are empty because the two types queried the empty fields because the two types have a couple of different fields (myDate, myLong and myLong10)